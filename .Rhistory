#' ability estimation for item selection, consistent with the original MPT paper.
#'
#' @export
mpt <- function(num_items = 30L,
take_training = TRUE,
label = "MPT",
feedback = mpt.feedback.no_score(),
audio_dir = "http://media.gold-msi.org/test_materials/MPT/v1-1/audio",
training_dir = "http://media.gold-msi.org/test_materials/MPT/training",
next_item.criterion = "bOpt",
next_item.estimator = "BM",
next_item.prior_dist = "norm",
next_item.prior_par = c(0, 1),
final_ability.estimator = "WL",
constrain_answers = FALSE,
dict = mpt::mpt_dict) {
stopifnot(is.scalar.character(label), is.scalar.numeric(num_items),
is.scalar.logical(take_training),
is.scalar.character(audio_dir),
is.scalar.character(training_dir),
psychTestR::is.timeline(feedback) ||
is.list(feedback) ||
psychTestR::is.test_element(feedback) ||
is.null(feedback))
audio_dir <- gsub("/$", "", audio_dir)
training_dir <- gsub("/$", "", training_dir)
psychTestR::new_timeline({
c(
if (take_training) instructions(training_dir),
main_test(label = label, audio_dir = audio_dir, num_items = num_items,
next_item.criterion = next_item.criterion,
next_item.estimator = next_item.estimator,
next_item.prior_dist = next_item.prior_dist,
next_item.prior_par = next_item.prior_par,
final_ability.estimator = final_ability.estimator,
constrain_answers = constrain_answers),
feedback
)},
dict = dict)
}
mpt()
is.scalar.character <- function(x) {
is.character(x) && is.scalar(x)
}
#' We recommend leaving this option disabled.
#'
#' @param dict The psychTestR dictionary used for internationalisation.
#'
#' @note Versions <= 0.2.0 of this package experimented with weighted likelihood
#' ability estimation for item selection.
#' However, subsequent versions of the package revert to Bayes modal
#' ability estimation for item selection, consistent with the original MPT paper.
#'
#' @export
mpt <- function(num_items = 30L,
take_training = TRUE,
label = "MPT",
feedback = mpt.feedback.no_score(),
audio_dir = "http://media.gold-msi.org/test_materials/MPT/v1-1/audio",
training_dir = "http://media.gold-msi.org/test_materials/MPT/training",
next_item.criterion = "bOpt",
next_item.estimator = "BM",
next_item.prior_dist = "norm",
next_item.prior_par = c(0, 1),
final_ability.estimator = "WL",
constrain_answers = FALSE,
dict = mpt::mpt_dict) {
stopifnot(is.scalar.character(label), is.scalar.numeric(num_items),
is.scalar.logical(take_training),
is.scalar.character(audio_dir),
is.scalar.character(training_dir),
psychTestR::is.timeline(feedback) ||
is.list(feedback) ||
psychTestR::is.test_element(feedback) ||
is.null(feedback))
audio_dir <- gsub("/$", "", audio_dir)
training_dir <- gsub("/$", "", training_dir)
psychTestR::new_timeline({
c(
if (take_training) instructions(training_dir),
main_test(label = label, audio_dir = audio_dir, num_items = num_items,
next_item.criterion = next_item.criterion,
next_item.estimator = next_item.estimator,
next_item.prior_dist = next_item.prior_dist,
next_item.prior_par = next_item.prior_par,
final_ability.estimator = final_ability.estimator,
constrain_answers = constrain_answers),
feedback
)},
dict = dict)
}
mpt()
is.scalar <- function(x) {
identical(length(x), 1L)
}
mpt()
?utils.R
is.scalar.character <- function(x) {
is.character(x) && is.scalar(x)
}
is.scalar.numeric <- function(x) {
is.numeric(x) && is.scalar(x)
}
is.scalar.logical <- function(x) {
is.logical(x) && is.scalar(x)
}
is.scalar <- function(x) {
identical(length(x), 1L)
}
is.integerlike <- function(x) {
all(round(x) == x)
}
is.scalar.integerlike <- function(x) {
is.scalar(x) && is.integerlike(x)
}
mmpt()
mpt()
devtools::install_github('pmcharrison/mpt')
# library(devtools)
library(htmltools)
library(psychTestR)
library(shiny)
library(mpt)
mpt()
mpt(...)
?psychTestRCAT::cat.feedback.graph
mpt(feedback =  psychTestRCAT::cat.feedback.graph(test_label, text_finish = "You finished the mistuning perception test!", next_button = "Next"))
mpt(feedback =  psychTestRCAT::cat.feedback.graph(mpt, text_finish = "You finished the mistuning perception test!", next_button = "Next"))
mpt(feedback =  psychTestRCAT::cat.feedback.graph(mdt, text_finish = "You finished the mistuning perception test!", next_button = "Next"))
mpt(feedback =  psychTestRCAT::cat.feedback.graph(mpt, text_finish = "You finished the mistuning perception test!", next_button = "Next"))
mpt(feedback =  psychTestRCAT::cat.feedback.graph(MPT, text_finish = "You finished the mistuning perception test!", next_button = "Next"))
mpt(feedback =  psychTestRCAT::cat.feedback.graph(text_finish = "You finished the mistuning perception test!", next_button = "Next"))
mpt(feedback =  psychTestRCAT::cat.feedback.graph(test_label=test_label, text_finish = "You finished the mistuning perception test!", next_button = "Next"))
?psychTestRCAT
?psychTestRCAT::cat.feedback.graph
test_label=MPT
DK_full <- function(title = "Musikalitet og mental hastighed",
admin_password = "replace-with-secure-password",
researcher_email = NULL,
languages = mpt_languages(),
dict = mpt::mpt_dict,
...) {
elts <- c(
# experiment,
mpt(...),
elt_jspsych,
psychTestR::new_timeline(
dict = dict
),
elt_save_results_to_disk(complete = TRUE),
final_page("Det kører!")
)
psychTestR::make_test(
elts,
opt = psychTestR::test_options(title = title,
admin_password = admin_password,
researcher_email = researcher_email,
demo = FALSE,
languages = languages))
}
DK_full <- function(title = "Musikalitet og mental hastighed",
admin_password = "replace-with-secure-password",
researcher_email = NULL,
languages = mpt_languages(),
dict = mpt::mpt_dict,
...) {
elts <- c(
# experiment,
mpt(...),
elt_jspsych,
psychTestR::new_timeline(
dict = dict
),
elt_save_results_to_disk(complete = TRUE),
final_page("Det kører!")
)
psychTestR::make_test(
elts,
opt = psychTestR::test_options(title = title,
admin_password = admin_password,
researcher_email = researcher_email,
demo = FALSE,
languages = languages))
}
if (FALSE) {
# To launch the test manually, run the following command.
# Note that other ways of launching the app may fail to provide access to
# the required media files.
shiny::runApp(".")
}
# To launch the test manually, run the following command.
# Note that other ways of launching the app may fail to provide access to
# the required media files.
shiny::runApp(".")
# To launch the test manually, run the following command.
# Note that other ways of launching the app may fail to provide access to
# the required media files.
shiny::runApp(".")
# To launch the test manually, run the following command.
# Note that other ways of launching the app may fail to provide access to
# the required media files.
shiny::runApp(".")
# To launch the test manually, run the following command.
# Note that other ways of launching the app may fail to provide access to
# the required media files.
shiny::runApp(".")
shiny::runApp(".")
library(htmltools)
library(psychTestR)
library_dir <- "jspsych/jspsych-6.1.0"
custom_dir <- "jspsych/js"
head <- tags$head(
# jsPsych library files
includeScript(file.path(library_dir, "jspsych.js")),
includeScript(file.path(library_dir, "plugins/jspsych-html-keyboard-response.js")),
includeScript(file.path(library_dir, "plugins/jspsych-image-keyboard-response.js")),
includeScript(file.path(library_dir, "plugins/jspsych-audio-keyboard-response.js")),
# Custom files
includeScript(file.path(custom_dir, "welcome.js")),
includeScript(file.path(custom_dir,"sv_training.js")),
includeScript(file.path(custom_dir,"sv_real.js")),
includeScript(file.path(custom_dir,"cv_training.js")),
includeScript(file.path(custom_dir,"cv_real.js")),
includeScript(file.path(custom_dir,"sa_training.js")),
includeScript(file.path(custom_dir,"sa_real.js")),
includeCSS(file.path(library_dir, "css/jspsych.css")),
includeCSS("jspsych/css/RT_DK.css")
)
ui <- tags$div(
head,
includeScript("jspsych/run_jspsych.js"),
tags$div(id = "js_psych", style = "min-height: 90vh")
)
elt_jspsych <- page(
ui = ui,
label = "jspsych",
get_answer = function(input, ...) input$jspsych_results,
validate = function(answer, ...) nchar(answer) > 0L,
save_answer = TRUE
)
if (FALSE) {
# To launch the test manually, run the following command.
# Note that other ways of launching the app may fail to provide access to
# the required media files.
shiny::runApp(".")
}
make_test(
elts = list(
elt_jspsych,
elt_save_results_to_disk(complete = TRUE),
final_page("Du har nu klaret de tre reaktionstidstests!\\Your final scores are plotted below, with reference to the general population")
),
opt = demo_options(display = display_options(
full_screen = TRUE,
content_background_colour = "grey",
css = c(file.path(library_dir, "css/jspsych.css"),
"jspsych/css/RT_DK.css")
)))
elt_jspsych <- page(
ui = ui,
label = "jspsych",
get_answer = function(input, ...) input$jspsych_results,
validate = function(answer, ...) nchar(answer) > 0L,
save_answer = TRUE
)
ui <- tags$div(
head,
includeScript("jspsych/run_jspsych.js"),
tags$div(id = "js_psych", style = "min-height: 90vh")
)
ui <- tags$div(
head,
includeScript("jspsych/run_jspsych.js"),
tags$div(id = "js_psych", style = "min-height: 90vh")
)
# To launch the test manually, run the following command.
# Note that other ways of launching the app may fail to provide access to
# the required media files.
shiny::runApp(".")
ui <- tags$div(
head,
includeScript("jspsych/run_jspsych.js"),
tags$div(id = "js_psych", style = "min-height: 90vh")
)
ui <- tags$div(
head,
includeScript("jspsych/run_jspsych.js"),
tags$div(id = "js_psych", style = "min-height: 90vh")
)
shiny::runApp(".")
setwd("C:/Users/au213911/Documents/jspsych")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
# GMSI FEEDBACK
gmsi_feedback <-   reactive_page(function(state, count, ...) {              # Feedback page
one_button_page(div(p(paste0("Din Gold-MSI score er: ",get_global("GeneralMusicalSophistication",state=state))),
p(paste0("Det gør dig mere musikalsk sofistikeret end ",sum(get_global("GeneralMusicalSophistication",state=state)>=GeneralPercentiles),"% af befolkningen!")),
p("Nu er vi nået til de tests, hvor skal du bruge hovedtelefoner. Først skal du indstille lydniveauet på din computer."),
p(strong("Skru helt ned for lyden"),
p("og tag hovedtelefonerne på, inden du trykker på knappen nedenfor."))),
button_text="Afspil lydeksempel")
})
gmsi_feedback()
gmsi_feedback
gmsi_feedback <-   reactive_page(function(state, count, ...) {              # Feedback page
one_button_page(div(p(paste0("Din Gold-MSI score er: ",get_global("GeneralMusicalSophistication",state=state))),
p(paste0("Det gør dig mere musikalsk sofistikeret end ",sum(get_global("GeneralMusicalSophistication",state=state)>=GeneralPercentiles),"% af befolkningen!")),
p("Nu er vi nået til de tests, hvor du skal bruge hovedtelefoner. Først skal du indstille lydniveauet på din computer."),
p(strong("Skru helt ned for lyden")),
p("og tag hovedtelefonerne på, inden du trykker på knappen nedenfor.")),
button_text="Afspil lydeksempel")
})
gmsi_feedback
make_test(gmsi_feedback)
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
make_test(gmsi_feedback)
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
datatest <- readRDS("C:/Users/au213911/AppData/Local/Temp/Temp1_results.zip/results/id=15&p_id=9a9a5d829a47b6fd6fea406c63a103b4541b9c797bfbc8f56f667acdca59ad63&save_id=3&pilot=false&complete=true.rds")
library(jsonlite)
write.csv(fromJSON(datatest$results$jspsych), "datatest.csv")
library(readr)
datatest <- read_csv("~/jsPsych/datatest.csv")
View(datatest)
View(datatest)
View(datatest)
View(datatest)
se15 <- readRDS("C:/Users/au213911/AppData/Local/Temp/Temp1_results.zip/results/id=15&p_id=9a9a5d829a47b6fd6fea406c63a103b4541b9c797bfbc8f56f667acdca59ad63&save_id=3&pilot=false&complete=true.rds")
View(se15)
View(se15)
se14 <- readRDS("C:/Users/au213911/AppData/Local/Temp/Temp1_results.zip/results/id=14&p_id=dc707aa5a6536e6324114f1e6b3e8c1d327554a88b06a5d9cb2aaa42b9915f18&save_id=3&pilot=false&complete=true.rds")
View(se14)
View(se14)
se13 <- readRDS("C:/Users/au213911/AppData/Local/Temp/Temp1_results.zip/results/id=13&p_id=7b61661607c4dabdd59620c3c4d90c9096045a066fc59371a2ffb1be6d9951d3&save_id=2&pilot=false&complete=true.rds")
View(se13)
View(se13)
View(se14)
View(se14)
se7 <- readRDS("C:/Users/au213911/AppData/Local/Temp/Temp1_results.zip/results/id=7&p_id=94e3d37d3de41f77ece0dfd1bfe53153b0e471846df27563c8454e5327064e53&save_id=3&pilot=false&complete=true.rds")
View(se7)
se18 <- readRDS("C:/Users/au213911/AppData/Local/Temp/Temp2_results.zip/results/id=18&p_id=f99b330c9dbefe4880be8dd3012af7686edfbec14e8a9627416756cd1cecfd7e&save_id=3&pilot=false&complete=true.rds")
View(se18)
View(se18)
se18a <- readRDS("C:/Users/au213911/AppData/Local/Temp/Temp2_results.zip/results/id=18&p_id=89bf9c81886a97fe8456cd6307fdfc5496f2da31a69a280d1e7945177c3427f2&save_id=3&pilot=false&complete=true.rds")
View(se18a)
View(se18a)
###############################################
# Extraction of data from Danish GoldMSI      #
# implementation in psychTestR                #
# Author: Niels Chr. Hansen                   #
# Date: 2019-11-10                            #
###############################################
# INITIALIZE
library(jsonlite)
# LIST FILES IN WORKING DIRECTORY (ignoring folders and recursives)
files <- setdiff(list.files(paste0(getwd(),"/output/results"),include.dirs=F,all.files=F),list.dirs(paste0(getwd(),"/output/results"),full.names=F))
# CREATE OUTPUT FILE
output <- data.frame(id=character(),
gender=character(),
age=numeric(),
zip_code=character(),
gaming=numeric(),
nationality=character(),
residence=character(),
youth_country=character(),
employment=character(),
education_completed=character(),
education_expected=character(),
stringsAsFactors=F)
# EXTRACT AND SAVE VARIABLES OF INTEREST
for (i in 1:length(files)) {
results <- readRDS(paste0(getwd(),"/output/results/",files[i]))
output[i,"id"] <- results$session$p_id
if ("Demographics"%in%names(results)) {
output[i,2:10] <- results$Demographics[c("gender","age","zip_code","gaming","nationality","residence","youth_country","employment","education_completed")]
if (output[i,"education_completed"]=="Stadig under uddannelse") output[i,"education_expected"] <- results$Demographics["education_expected"]
}
#session <-  results$session
#GMSI <- results$GMSI
#TestOrder <- results$results$TestOrder_MPT_RT
#MPT <- results$MPT
#RT <- fromJSON(as.character(results$RT))
}
# CHANGE VARIABLE MODES
output[,c("age","gaming")] <- lapply(output[,c("age","gaming")],as.numeric)
output[,c("id","gender","zip_code","nationality","residence","youth_country","employment","education_completed","education_expected")] <- lapply(output[,c("id","gender","zip_code","nationality","residence","youth_country","employment","education_completed","education_expected")],as.factor)
# DISPLAY DATA
par(mfrow=(c(2,2)))
barplot(table(output$gender),main="K?n")
boxplot(output$age,main="Alder",ylab="?r"); points(jitter(rep(1,length(output$age)),factor=2),output$age,pch=4)
barplot(table(output$zip_code),main="Postnummer")
boxplot(output$age,main="Gaming",ylab="Timer/m?ned"); points(jitter(rep(1,length(output$gaming)),factor=2),output$gaming,pch=4)
# SAVE PRELIMINARY RESULTS
write.csv(output,paste0(getwd(),"/output/prelimDemographics_",Sys.Date(),".csv"))
###############################################
# Extraction of data from Danish GoldMSI      #
# implementation in psychTestR                #
# Author: Niels Chr. Hansen                   #
# Date: 2019-11-10                            #
###############################################
# INITIALIZE
library(jsonlite)
# LIST FILES IN WORKING DIRECTORY (ignoring folders and recursives)
files <- setdiff(list.files(paste0(getwd(),"/output/results"),include.dirs=F,all.files=F),list.dirs(paste0(getwd(),"/output/results"),full.names=F))
# CREATE OUTPUT FILE
output <- data.frame(id=character(),
gender=character(),
age=numeric(),
zip_code=character(),
gaming=numeric(),
nationality=character(),
residence=character(),
youth_country=character(),
employment=character(),
education_completed=character(),
education_expected=character(),
stringsAsFactors=F)
# EXTRACT AND SAVE VARIABLES OF INTEREST
for (i in 1:length(files)) {
results <- readRDS(paste0(getwd(),"/output/results/",files[i]))
output[i,"id"] <- results$session$p_id
if ("Demographics"%in%names(results)) {
output[i,2:10] <- results$Demographics[c("gender","age","zip_code","gaming","nationality","residence","youth_country","employment","education_completed")]
if (output[i,"education_completed"]=="Stadig under uddannelse") output[i,"education_expected"] <- results$Demographics["education_expected"]
}
#session <-  results$session
#GMSI <- results$GMSI
#TestOrder <- results$results$TestOrder_MPT_RT
#MPT <- results$MPT
#RT <- fromJSON(as.character(results$RT))
}
# CHANGE VARIABLE MODES
output[,c("age","gaming")] <- lapply(output[,c("age","gaming")],as.numeric)
output[,c("id","gender","zip_code","nationality","residence","youth_country","employment","education_completed","education_expected")] <- lapply(output[,c("id","gender","zip_code","nationality","residence","youth_country","employment","education_completed","education_expected")],as.factor)
# DISPLAY DATA
par(mfrow=(c(2,2)))
barplot(table(output$gender),main="K?n")
boxplot(output$age,main="Alder",ylab="?r"); points(jitter(rep(1,length(output$age)),factor=2),output$age,pch=4)
barplot(table(output$zip_code),main="Postnummer")
boxplot(output$age,main="Gaming",ylab="Timer/m?ned"); points(jitter(rep(1,length(output$gaming)),factor=2),output$gaming,pch=4)
# SAVE PRELIMINARY RESULTS
write.csv(output,paste0(getwd(),"/output/prelimDemographics_",Sys.Date(),".csv"))
View(output)
View(output)
datatest <- readRDS("C:/Users/au213911/AppData/Local/Temp/Temp2_results.zip/results/id=18&p_id=f99b330c9dbefe4880be8dd3012af7686edfbec14e8a9627416756cd1cecfd7e&save_id=3&pilot=false&complete=true.rds")
library(jsonlite)
write.csv(fromJSON(datatest$results$jspsych), "datatest.csv")
library(readr)
datatest <- read_csv("~/jsPsych/datatest.csv")
View(datatest)
View(fromJSON(as.character(datatest$RT)))
datatest <- readRDS("C:/Users/au213911/AppData/Local/Temp/Temp2_results.zip/results/id=18&p_id=f99b330c9dbefe4880be8dd3012af7686edfbec14e8a9627416756cd1cecfd7e&save_id=3&pilot=false&complete=true.rds")
library(jsonlite)
write.csv(fromJSON(datatest$results$jspsych), "datatest.csv")
library(readr)
datatest <- read_csv("~/jsPsych/datatest.csv")
View(datatest)
View(fromJSON(as.character(datatest$RT)))
se18b <- readRDS("C:/Users/au213911/AppData/Local/Temp/Temp2_results.zip/results/id=18&p_id=f99b330c9dbefe4880be8dd3012af7686edfbec14e8a9627416756cd1cecfd7e&save_id=3&pilot=false&complete=true.rds")
View(se18b)
View(se18b)
datatest <- readRDS("C:/Users/au213911/AppData/Local/Temp/Temp2_results.zip/results/id=18&p_id=89bf9c81886a97fe8456cd6307fdfc5496f2da31a69a280d1e7945177c3427f2&save_id=3&pilot=false&complete=true.rds")
library(jsonlite)
write.csv(fromJSON(datatest$results$jspsych), "datatest.csv")
library(readr)
datatest <- read_csv("~/jsPsych/datatest.csv")
View(datatest)
View(fromJSON(as.character(datatest$RT)))
View(fromJSON(as.character(datatest$RT)))
library(jsonlite)
View(fromJSON(as.character(datatest$RT)))
View(datatest)
View(datatest)
datatest <- readRDS("C:/Users/au213911/AppData/Local/Temp/Temp2_results.zip/results/id=18&p_id=89bf9c81886a97fe8456cd6307fdfc5496f2da31a69a280d1e7945177c3427f2&save_id=3&pilot=false&complete=true.rds")
View(fromJSON(as.character(datatest$RT)))
se11 <- readRDS("C:/Users/au213911/AppData/Local/Temp/Temp2_results.zip/results/id=11&p_id=77b642b006db0aaf210a790d95e6f4b8144074280dd6b9da8e0a3a0e4426c5ed&save_id=3&pilot=false&complete=true.rds")
View(se11)
View(se11)
se7 <- readRDS("C:/Users/au213911/AppData/Local/Temp/Temp2_results.zip/results/id=7&p_id=94e3d37d3de41f77ece0dfd1bfe53153b0e471846df27563c8454e5327064e53&save_id=3&pilot=false&complete=true.rds")
View(se7)
View(se7)
se3 <- readRDS("C:/Users/au213911/AppData/Local/Temp/Temp2_results.zip/results/id=3&p_id=83d82bbaf4d1228ecf4f40ee31bc9e15f52b5c69237107d1b7ac4194e3d37d3d&save_id=3&pilot=false&complete=true.rds")
View(se3)
View(se3)
se10 <- readRDS("C:/Users/au213911/AppData/Local/Temp/Temp2_results.zip/results/id=10&p_id=d84427b059adbe249a5d4bdbc40ef320d81b77e41cae3865fe0dbee6b5bafee1&save_id=3&pilot=false&complete=true.rds")
View(se10)
View(se10)
se11 <- readRDS("C:/Users/au213911/AppData/Local/Temp/Temp2_results.zip/results/id=11&p_id=77b642b006db0aaf210a790d95e6f4b8144074280dd6b9da8e0a3a0e4426c5ed&save_id=3&pilot=false&complete=true.rds")
se14 <- readRDS("C:/Users/au213911/AppData/Local/Temp/Temp2_results.zip/results/id=14&p_id=dc707aa5a6536e6324114f1e6b3e8c1d327554a88b06a5d9cb2aaa42b9915f18&save_id=3&pilot=false&complete=true.rds")
View(se14)
View(se14)
se15 <- readRDS("C:/Users/au213911/AppData/Local/Temp/Temp2_results.zip/results/id=15&p_id=9a9a5d829a47b6fd6fea406c63a103b4541b9c797bfbc8f56f667acdca59ad63&save_id=3&pilot=false&complete=true.rds")
View(se15)
View(se15)
se17 <- readRDS("C:/Users/au213911/AppData/Local/Temp/Temp2_results.zip/results/id=17&p_id=09e9db0b3167a349e7eb727b49cc0e6b8923209f01da9f326350154f08c63c70&save_id=3&pilot=false&complete=true.rds")
View(se17)
View(se17)
shiny::runApp(".")
View(datatest)
View(fromJSON(as.character(datatest$RT)))
View(fromJSON(as.character(se7$RT)))
View(fromJSON(as.character(se7$RT)))
se18a <- readRDS("C:/Users/au213911/AppData/Local/Temp/Temp2_results.zip/results/id=18&p_id=89bf9c81886a97fe8456cd6307fdfc5496f2da31a69a280d1e7945177c3427f2&save_id=3&pilot=false&complete=true.rds")
View(se18a)
