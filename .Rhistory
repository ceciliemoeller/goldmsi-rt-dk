signes_data$`RF.LF` <- factor(signes_data$`RF.LF`,labels=c("Non-dominant","Dominant"))
signes_data$RH.LH <- signes_data$`Preferred`;levels(signes_data$RH.LH) <- c("Non-dominant","Dominant")
signes_data$Order <- factor(signes_data$Order)
signes_data$Sex <- factor(signes_data$Sex)
signes_data <- signes_data[,-c(57:60)] #sletter dobbeltkolonner, der fx har fÃ¥et et nyt navn
signes_data$`AV.V.B` <- rowMeans(signes_data[,c(8:11,20:23,32:35)])
speciale$`AV.B.V` <- rowMeans(speciale[,c(12:15,24:27,36:39)])
speciale$`A.V.B` <- rowMeans(speciale[,c(8:11)])
speciale$`A.B.V` <- rowMeans(speciale[,c(12:15)])
speciale$`B.V.B` <- rowMeans(speciale[,c(20:23)])
speciale$`B.B.V` <- rowMeans(speciale[,c(24:27)])
speciale$`C.V.B` <- rowMeans(speciale[,c(32:35)])
speciale$`C.B.V` <- rowMeans(speciale[,c(36:39)])
str(signes_data$MET)
library(matrixStats)
library(dplyr)
# Samlet data-sÃ¦t
library(readxl)
signes_data <- read_excel("C:/Users/au213911/Dropbox/Projects_current/Signe/Resultater14.xlsx",sheet=5)
signes_data <- signes_data[-c(9,64),] #remove outlier
str(signes_data$MET)
str(signes_data$MET)
str(signes_data$MET)
str(signes_data$MET[1:15])
install.packages("devtools")
devtools::install_github("pmcharrison/psychTestR")
devtools::install_github("pmcharrison/psychTestR")
library(devtools)
library(htmltools)
library(psychTestR)
library(shiny)
library(mpt)
demo_mpt()
demo_mpt(num_items = 2, take_training=FALSE)
demo_mpt(num_items = 2, take_training=FALSE)
standalone_mpt(admin_password = "hejsa")
standalone_mpt(num_items=2, admin_password = "hejsa")
standalone_mpt(num_items=2, take_training=FALSE, admin_password = "hejsa")
?psychTestRCAT
mpt(feedback =  psychTestRCAT::cat.feedback.graph(text_finish = "You finished the mistuning perception test!", next_button = "Next"))
is.scalar.character <- function(x) {
is.character(x) && is.scalar(x)
}
mpt(feedback =  psychTestRCAT::cat.feedback.graph(text_finish = "You finished the mistuning perception test!", next_button = "Next"))
?feedback
library(psychTestRCAT)
mpt(feedback =  psychTestRCAT::cat.feedback.graph(text_finish = "You finished the mistuning perception test!", next_button = "Next"))
is.scalar.character <- function(x) {
is.character(x) && is.scalar(x)
}
mpt(feedback =  psychTestRCAT::cat.feedback.graph(text_finish = "You finished the mistuning perception test!", next_button = "Next"))
library(mpt)
mpt(feedback =  psychTestRCAT::cat.feedback.graph(text_finish = "You finished the mistuning perception test!", next_button = "Next"))
cat.feedback.graph <- function(test_label,
text_finish = "You finished the test!",
text_score = "Your final score:",
text_rank = "Your rank compared to previous participants:",
x_axis = "Score",
y_axis = "Count",
next_button = NULL,
digits = 3L,
explain_IRT = TRUE) {
stopifnot(is.scalar.character(test_label))
loadNamespace("plotly")
loadNamespace("ggplot2")
c(
cat.feedback.graph.manage_scores(test_label = test_label),
cat.feedback.graph.display_scores(text_finish = text_finish,
text_score = text_score,
text_rank = text_rank,
x_axis = x_axis, y_axis = y_axis,
next_button = next_button,
digits = digits,
explain_IRT = explain_IRT)
)
}
cat.feedback.graph.manage_scores <- function(test_label) {
psychTestR::code_block(function(answer, opt, state, ...) {
score <- answer$ability
stopifnot(is.scalar.numeric(score))
file <- file.path(psychTestR::get_supplementary_results_dir(opt),
paste0(test_label, "_final_scores.txt"))
write(score, file, append = TRUE)
all_scores <- as.numeric(read.table(file)[[1]])
num_scores <- length(all_scores)
rank <- cat.feedback.graph.get_rank(all_scores)
psychTestR::set_local(key = "cat_results",
value = list(score = as.numeric(score),
all_scores = all_scores,
num_scores = num_scores,
rank = rank),
state = state)
})
}
cat.feedback.graph.get_rank <- function(all_scores) {
num_scores <- length(all_scores)
num_scores + 1L - rank(all_scores, ties.method = "max")[num_scores]
}
cat.feedback.graph.display_scores <- function(text_finish, text_score, text_rank,
x_axis, y_axis,
next_button, digits,
explain_IRT) {
stopifnot(is.scalar.character(x_axis),
is.scalar.character(y_axis),
is.scalar.character(text_finish) || is(text_finish, "shiny.tag"),
is.scalar.character(text_score) || is(text_score, "shiny.tag"),
is.scalar.character(text_rank) || is(text_rank, "shiny.tag"),
is.null(next_button) || is.scalar.character(next_button) ||
is(next_button, "shiny.tag"),
is.scalar.integerlike(digits),
is.scalar.logical(explain_IRT))
psychTestR::reactive_page(function(state, ...) {
res <- psychTestR::get_local(key = "cat_results", state = state)
psychTestR::page(
ui = shiny::div(
shiny::p(text_finish),
shiny::p(text_score, shiny::strong(round(res$score, digits = digits))),
shiny::p(text_rank, shiny::strong(sprintf("%i/%i", res$rank, res$num_scores))),
if (res$num_scores > 1L)
shiny::div(
cat.feedback.graph.plot_cat_results(res, x_axis = x_axis, y_axis = y_axis),
if (explain_IRT)
shiny::div(
shiny::p(
"Scores are plotted on an",
shiny::tags$a(href = "https://en.wikipedia.org/wiki/Item_response_theory",
"item response theory"),
"metric, where the mean score in the general population is approximately 0,",
"and the standard deviation in the population is approximately 1."),
shiny::p(
"Your score places you in the top",
shiny::strong(paste0(100 - round(100 * stats::pnorm(res$score)), "%")),
"of the general population.")
),
style = "border-style: solid; border-width: 1px; background-color: white;"),
if (!is.null(next_button))
shiny::p(psychTestR::trigger_button("next", next_button))
)
)
})
}
cat.feedback.graph.plot_cat_results <- function(res, x_axis, y_axis) {
if (!is.list(res)) stop("<cat_results> was malformed, looking like this: ",
utils::capture.output(print(res)))
num_bins <- pmax(16, ceiling(log2(res$num_scores)) + 1)
stopifnot(is.scalar.character(x_axis),
is.scalar.character(y_axis),
is.list(res),
is.numeric(res$all_scores))
plotly::ggplotly(ggplot2::ggplot(
data.frame(Score = res$all_scores), ggplot2::aes_string(x = "Score")
) + ggplot2::geom_histogram(bins = num_bins,
colour = "#004d66",
fill = "#00ace6") +
ggplot2::geom_vline(xintercept = res$score, colour = "#e60000") +
ggplot2::scale_x_continuous(x_axis) +
ggplot2::scale_y_continuous(y_axis) +
ggplot2::theme_bw() +
ggplot2::theme(panel.grid = ggplot2::element_blank()),
height = 300)
# panel.background = ggplot2::element_rect(fill = "#f7f7f7"))
# width = 300, height = 300)
}
View(cat.feedback.graph.plot_cat_results)
View(cat.feedback.graph.plot_cat_results)
View(cat.feedback.graph.manage_scores)
View(cat.feedback.graph.manage_scores)
View(cat.feedback.graph.display_scores)
View(cat.feedback.graph.display_scores)
standalone_mpt()
standalone_mpt(feedback =  psychTestRCAT::cat.feedback.graph(text_finish = "You finished the mistuning perception test!", next_button = "Next"))
standalone_mpt(mpt(feedback =  psychTestRCAT::cat.feedback.graph(text_finish = "You finished the mistuning perception test!", next_button = "Next")))
is.scalar.character <- function(x) {
is.character(x) && is.scalar(x)
}
standalone_mpt(mpt(feedback =  psychTestRCAT::cat.feedback.graph(text_finish = "You finished the mistuning perception test!", next_button = "Next")))
?is.scalar:character
?is.scalar.character
mpt()
help(deprecated)
help("psychTestR-deprecated").
help("psychTestR-deprecated").
mpt()
library(devtools)
library(htmltools)
library(psychTestR)
library(shiny)
library(mpt)
mpt()
devtools::install_github('pmcharrison/mpt')
#' We recommend leaving this option disabled.
#'
#' @param dict The psychTestR dictionary used for internationalisation.
#'
#' @note Versions <= 0.2.0 of this package experimented with weighted likelihood
#' ability estimation for item selection.
#' However, subsequent versions of the package revert to Bayes modal
#' ability estimation for item selection, consistent with the original MPT paper.
#'
#' @export
mpt <- function(num_items = 30L,
take_training = TRUE,
label = "MPT",
feedback = mpt.feedback.no_score(),
audio_dir = "http://media.gold-msi.org/test_materials/MPT/v1-1/audio",
training_dir = "http://media.gold-msi.org/test_materials/MPT/training",
next_item.criterion = "bOpt",
next_item.estimator = "BM",
next_item.prior_dist = "norm",
next_item.prior_par = c(0, 1),
final_ability.estimator = "WL",
constrain_answers = FALSE,
dict = mpt::mpt_dict) {
stopifnot(is.scalar.character(label), is.scalar.numeric(num_items),
is.scalar.logical(take_training),
is.scalar.character(audio_dir),
is.scalar.character(training_dir),
psychTestR::is.timeline(feedback) ||
is.list(feedback) ||
psychTestR::is.test_element(feedback) ||
is.null(feedback))
audio_dir <- gsub("/$", "", audio_dir)
training_dir <- gsub("/$", "", training_dir)
psychTestR::new_timeline({
c(
if (take_training) instructions(training_dir),
main_test(label = label, audio_dir = audio_dir, num_items = num_items,
next_item.criterion = next_item.criterion,
next_item.estimator = next_item.estimator,
next_item.prior_dist = next_item.prior_dist,
next_item.prior_par = next_item.prior_par,
final_ability.estimator = final_ability.estimator,
constrain_answers = constrain_answers),
feedback
)},
dict = dict)
}
mpt()
is.scalar.character <- function(x) {
is.character(x) && is.scalar(x)
}
#' We recommend leaving this option disabled.
#'
#' @param dict The psychTestR dictionary used for internationalisation.
#'
#' @note Versions <= 0.2.0 of this package experimented with weighted likelihood
#' ability estimation for item selection.
#' However, subsequent versions of the package revert to Bayes modal
#' ability estimation for item selection, consistent with the original MPT paper.
#'
#' @export
mpt <- function(num_items = 30L,
take_training = TRUE,
label = "MPT",
feedback = mpt.feedback.no_score(),
audio_dir = "http://media.gold-msi.org/test_materials/MPT/v1-1/audio",
training_dir = "http://media.gold-msi.org/test_materials/MPT/training",
next_item.criterion = "bOpt",
next_item.estimator = "BM",
next_item.prior_dist = "norm",
next_item.prior_par = c(0, 1),
final_ability.estimator = "WL",
constrain_answers = FALSE,
dict = mpt::mpt_dict) {
stopifnot(is.scalar.character(label), is.scalar.numeric(num_items),
is.scalar.logical(take_training),
is.scalar.character(audio_dir),
is.scalar.character(training_dir),
psychTestR::is.timeline(feedback) ||
is.list(feedback) ||
psychTestR::is.test_element(feedback) ||
is.null(feedback))
audio_dir <- gsub("/$", "", audio_dir)
training_dir <- gsub("/$", "", training_dir)
psychTestR::new_timeline({
c(
if (take_training) instructions(training_dir),
main_test(label = label, audio_dir = audio_dir, num_items = num_items,
next_item.criterion = next_item.criterion,
next_item.estimator = next_item.estimator,
next_item.prior_dist = next_item.prior_dist,
next_item.prior_par = next_item.prior_par,
final_ability.estimator = final_ability.estimator,
constrain_answers = constrain_answers),
feedback
)},
dict = dict)
}
mpt()
is.scalar <- function(x) {
identical(length(x), 1L)
}
mpt()
?utils.R
is.scalar.character <- function(x) {
is.character(x) && is.scalar(x)
}
is.scalar.numeric <- function(x) {
is.numeric(x) && is.scalar(x)
}
is.scalar.logical <- function(x) {
is.logical(x) && is.scalar(x)
}
is.scalar <- function(x) {
identical(length(x), 1L)
}
is.integerlike <- function(x) {
all(round(x) == x)
}
is.scalar.integerlike <- function(x) {
is.scalar(x) && is.integerlike(x)
}
mmpt()
mpt()
devtools::install_github('pmcharrison/mpt')
# library(devtools)
library(htmltools)
library(psychTestR)
library(shiny)
library(mpt)
mpt()
mpt(...)
?psychTestRCAT::cat.feedback.graph
mpt(feedback =  psychTestRCAT::cat.feedback.graph(test_label, text_finish = "You finished the mistuning perception test!", next_button = "Next"))
mpt(feedback =  psychTestRCAT::cat.feedback.graph(mpt, text_finish = "You finished the mistuning perception test!", next_button = "Next"))
mpt(feedback =  psychTestRCAT::cat.feedback.graph(mdt, text_finish = "You finished the mistuning perception test!", next_button = "Next"))
mpt(feedback =  psychTestRCAT::cat.feedback.graph(mpt, text_finish = "You finished the mistuning perception test!", next_button = "Next"))
mpt(feedback =  psychTestRCAT::cat.feedback.graph(MPT, text_finish = "You finished the mistuning perception test!", next_button = "Next"))
mpt(feedback =  psychTestRCAT::cat.feedback.graph(text_finish = "You finished the mistuning perception test!", next_button = "Next"))
mpt(feedback =  psychTestRCAT::cat.feedback.graph(test_label=test_label, text_finish = "You finished the mistuning perception test!", next_button = "Next"))
?psychTestRCAT
?psychTestRCAT::cat.feedback.graph
test_label=MPT
DK_full <- function(title = "Musikalitet og mental hastighed",
admin_password = "replace-with-secure-password",
researcher_email = NULL,
languages = mpt_languages(),
dict = mpt::mpt_dict,
...) {
elts <- c(
# experiment,
mpt(...),
elt_jspsych,
psychTestR::new_timeline(
dict = dict
),
elt_save_results_to_disk(complete = TRUE),
final_page("Det kører!")
)
psychTestR::make_test(
elts,
opt = psychTestR::test_options(title = title,
admin_password = admin_password,
researcher_email = researcher_email,
demo = FALSE,
languages = languages))
}
DK_full <- function(title = "Musikalitet og mental hastighed",
admin_password = "replace-with-secure-password",
researcher_email = NULL,
languages = mpt_languages(),
dict = mpt::mpt_dict,
...) {
elts <- c(
# experiment,
mpt(...),
elt_jspsych,
psychTestR::new_timeline(
dict = dict
),
elt_save_results_to_disk(complete = TRUE),
final_page("Det kører!")
)
psychTestR::make_test(
elts,
opt = psychTestR::test_options(title = title,
admin_password = admin_password,
researcher_email = researcher_email,
demo = FALSE,
languages = languages))
}
if (FALSE) {
# To launch the test manually, run the following command.
# Note that other ways of launching the app may fail to provide access to
# the required media files.
shiny::runApp(".")
}
# To launch the test manually, run the following command.
# Note that other ways of launching the app may fail to provide access to
# the required media files.
shiny::runApp(".")
# To launch the test manually, run the following command.
# Note that other ways of launching the app may fail to provide access to
# the required media files.
shiny::runApp(".")
# To launch the test manually, run the following command.
# Note that other ways of launching the app may fail to provide access to
# the required media files.
shiny::runApp(".")
# To launch the test manually, run the following command.
# Note that other ways of launching the app may fail to provide access to
# the required media files.
shiny::runApp(".")
shiny::runApp(".")
library(htmltools)
library(psychTestR)
library_dir <- "jspsych/jspsych-6.1.0"
custom_dir <- "jspsych/js"
head <- tags$head(
# jsPsych library files
includeScript(file.path(library_dir, "jspsych.js")),
includeScript(file.path(library_dir, "plugins/jspsych-html-keyboard-response.js")),
includeScript(file.path(library_dir, "plugins/jspsych-image-keyboard-response.js")),
includeScript(file.path(library_dir, "plugins/jspsych-audio-keyboard-response.js")),
# Custom files
includeScript(file.path(custom_dir, "welcome.js")),
includeScript(file.path(custom_dir,"sv_training.js")),
includeScript(file.path(custom_dir,"sv_real.js")),
includeScript(file.path(custom_dir,"cv_training.js")),
includeScript(file.path(custom_dir,"cv_real.js")),
includeScript(file.path(custom_dir,"sa_training.js")),
includeScript(file.path(custom_dir,"sa_real.js")),
includeCSS(file.path(library_dir, "css/jspsych.css")),
includeCSS("jspsych/css/RT_DK.css")
)
ui <- tags$div(
head,
includeScript("jspsych/run_jspsych.js"),
tags$div(id = "js_psych", style = "min-height: 90vh")
)
elt_jspsych <- page(
ui = ui,
label = "jspsych",
get_answer = function(input, ...) input$jspsych_results,
validate = function(answer, ...) nchar(answer) > 0L,
save_answer = TRUE
)
if (FALSE) {
# To launch the test manually, run the following command.
# Note that other ways of launching the app may fail to provide access to
# the required media files.
shiny::runApp(".")
}
make_test(
elts = list(
elt_jspsych,
elt_save_results_to_disk(complete = TRUE),
final_page("Du har nu klaret de tre reaktionstidstests!\\Your final scores are plotted below, with reference to the general population")
),
opt = demo_options(display = display_options(
full_screen = TRUE,
content_background_colour = "grey",
css = c(file.path(library_dir, "css/jspsych.css"),
"jspsych/css/RT_DK.css")
)))
elt_jspsych <- page(
ui = ui,
label = "jspsych",
get_answer = function(input, ...) input$jspsych_results,
validate = function(answer, ...) nchar(answer) > 0L,
save_answer = TRUE
)
ui <- tags$div(
head,
includeScript("jspsych/run_jspsych.js"),
tags$div(id = "js_psych", style = "min-height: 90vh")
)
ui <- tags$div(
head,
includeScript("jspsych/run_jspsych.js"),
tags$div(id = "js_psych", style = "min-height: 90vh")
)
# To launch the test manually, run the following command.
# Note that other ways of launching the app may fail to provide access to
# the required media files.
shiny::runApp(".")
ui <- tags$div(
head,
includeScript("jspsych/run_jspsych.js"),
tags$div(id = "js_psych", style = "min-height: 90vh")
)
ui <- tags$div(
head,
includeScript("jspsych/run_jspsych.js"),
tags$div(id = "js_psych", style = "min-height: 90vh")
)
devtools::install_github('pmcharrison/psychTestR')
library(digest)
detach("package:digest", unload = TRUE)
#setwd("C:/Users/nch/Desktop/pmcharrison-psychTestR-bcc0e86")    # Specify where to save output files when running locally
setwd("C:/Users/au213911/Documents/jspsych")
devtools::install_github('pmcharrison/psychTestR')
devtools::install_github('pmcharrison/psychTestR')
devtools::install_github('pmcharrison/mpt')
devtools::install_github('pmcharrison/psychTestR')
devtools::install_github('pmcharrison/mpt')
devtools::install_github('pmcharrison/psychTestR')
devtools::install_github('pmcharrison/mpt')
#setwd("C:/Users/nch/Desktop/pmcharrison-psychTestR-bcc0e86")    # Specify where to save output files when running locally
setwd("C:/Users/au213911/Documents/jspsych")
library(psychTestR)
library(tidyverse)
library(htmltools)
library(shiny)
library(tibble)
library(stringr)
library(varhandle)
library(mpt)
#setwd("C:/Users/nch/Desktop/pmcharrison-psychTestR-bcc0e86")    # Specify where to save output files when running locally
setwd("C:/Users/au213911/Documents/jspsych")
install.packages('devtools')
devtools::install_github('pmcharrison/psychTestR')
